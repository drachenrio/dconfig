/*
 * ============================================================================
 * GNU Lesser General Public License
 * ============================================================================
 *
 * DConfig - Free Dynamic Configuration Toolkit
 * Copyright (C) 2006, 2007 Jonathan Luo
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307, USA.
 * 
 */

package org.moonwave.dconfig.ui;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.util.List;
import javax.swing.AbstractAction;
import javax.swing.AbstractButton;
import javax.swing.Action;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.ListCellRenderer;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.moonwave.dconfig.dao.springfw.DataSourceManager;
import org.moonwave.dconfig.model.ConnectionInfo;
import org.moonwave.dconfig.model.DriverInfo;
import org.moonwave.dconfig.ui.model.AppContext;
import org.moonwave.dconfig.ui.model.TableModelImpl;
import org.moonwave.dconfig.ui.util.AppUtil;
import org.moonwave.dconfig.ui.util.ConnectionInfoUtil;
import org.moonwave.dconfig.ui.util.DialogUtil;
import org.moonwave.dconfig.ui.util.DriverInfoUtil;
import org.moonwave.dconfig.ui.util.ImageUtil;
import org.moonwave.dconfig.ui.util.MenuUtil;
import org.moonwave.dconfig.ui.util.TableUtil;
import org.moonwave.dconfig.ui.util.ToolbarUtil;
import org.moonwave.dconfig.util.DbUtil;

/**
 *
 * @author  jonathan
 */
public class DlgDbConnection extends javax.swing.JDialog {
    
    private static final Log log = LogFactory.getLog(DlgDbConnection.class);	    

    public static final String NEWALIAS = "alias #";
    public static final int    NEWALIASLEN = NEWALIAS.length();
    javax.swing.JDialog dialog;
    
    /** Creates new form DlgDBConnection */
    public DlgDbConnection(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        // set dialog position inside its parent
        if (parent != null) {
            Dimension parentSize = parent.getSize();
            Point p = parent.getLocation(); // Parent position
            setLocation(p.x + parentSize.width / 18, p.y+ parentSize.height / 5); 
        }
        initComponents();
        postInitialization();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        connectionList = new javax.swing.JList();
        btnNew = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnUp = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnDown = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtAlias = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cbJdbcDriver = new javax.swing.JComboBox();
        txtDbUrl = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();
        ckSavePassword = new javax.swing.JCheckBox();
        ckDefaultConnection = new javax.swing.JCheckBox();
        btnConnect = new javax.swing.JButton();
        btnDisconnect = new javax.swing.JButton();
        lblMessage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Connection");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jSplitPane1.setMinimumSize(new java.awt.Dimension(12, 3));
        jLabel1.setText("Connection");

        connectionList.setFont(new java.awt.Font("Dialog", 0, 12));
        connectionList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(connectionList);
        connectionList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                connectionListValueChanged(evt);
            }
        });

        btnNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/new16.gif")));
        btnNew.setToolTipText("Add a new connection");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete16.gif")));
        btnDelete.setToolTipText("Delete connection");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnUp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/up16.png")));
        btnUp.setToolTipText("Move entry up");
        btnUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpActionPerformed(evt);
            }
        });

        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/save16.gif")));
        btnSave.setToolTipText("Save changes");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnDown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/down16.png")));
        btnDown.setToolTipText("Move entry down");
        btnDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDownActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(btnNew, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, Short.MAX_VALUE)
                    .add(btnUp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, Short.MAX_VALUE)
                    .add(btnDelete, 0, 0, Short.MAX_VALUE)
                    .add(btnSave, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnDown, 0, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel2Layout.linkSize(new java.awt.Component[] {btnDelete, btnDown, btnNew, btnUp}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(btnNew)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnSave)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnDelete)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnUp)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnDown))
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel2Layout.linkSize(new java.awt.Component[] {btnDelete, btnDown, btnNew, btnUp}, org.jdesktop.layout.GroupLayout.VERTICAL);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jSplitPane1.setLeftComponent(jPanel1);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Connection Info"));
        jLabel3.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel3.setText("Alias:");

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel4.setText("JDBC Driver:");

        jLabel5.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel5.setText("Database URL:");

        cbJdbcDriver.setFont(new java.awt.Font("Dialog", 0, 12));

        jLabel6.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel6.setText("User Name:");

        jLabel7.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel7.setText("Password:");

        txtPassword.setText("test");

        ckSavePassword.setFont(new java.awt.Font("Dialog", 0, 12));
        ckSavePassword.setText("Save Password");
        ckSavePassword.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        ckSavePassword.setMargin(new java.awt.Insets(0, 0, 0, 0));

        ckDefaultConnection.setFont(new java.awt.Font("Dialog", 0, 12));
        ckDefaultConnection.setText("Set as default connection");
        ckDefaultConnection.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        ckDefaultConnection.setMargin(new java.awt.Insets(0, 0, 0, 0));

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel7)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel6)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel5)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel4)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel3))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(ckDefaultConnection)
                    .add(ckSavePassword)
                    .add(txtAlias, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 465, Short.MAX_VALUE)
                    .add(cbJdbcDriver, 0, 465, Short.MAX_VALUE)
                    .add(txtDbUrl, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 465, Short.MAX_VALUE)
                    .add(txtUsername, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 465, Short.MAX_VALUE)
                    .add(txtPassword, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 465, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(txtAlias, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(cbJdbcDriver, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5)
                    .add(txtDbUrl, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel6)
                    .add(txtUsername, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel7)
                    .add(txtPassword, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(ckSavePassword)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 9, Short.MAX_VALUE)
                .add(ckDefaultConnection)
                .addContainerGap())
        );

        btnConnect.setText("Connect");
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });

        btnDisconnect.setText("Disconnect");
        btnDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisconnectActionPerformed(evt);
            }
        });

        lblMessage.setFont(new java.awt.Font("Dialog", 0, 12));
        lblMessage.setText("jLabel8");

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(jPanel3Layout.createSequentialGroup()
                                .add(lblMessage, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 576, Short.MAX_VALUE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jLabel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 14, Short.MAX_VALUE))))
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(166, 166, 166)
                        .add(btnConnect)
                        .add(43, 43, 43)
                        .add(btnDisconnect)))
                .addContainerGap())
        );

        jPanel3Layout.linkSize(new java.awt.Component[] {btnConnect, btnDisconnect}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnConnect)
                    .add(btnDisconnect))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 48, Short.MAX_VALUE)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(lblMessage))
                .add(21, 21, 21))
        );
        jSplitPane1.setRightComponent(jPanel3);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jSplitPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 733, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jSplitPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    protected void postInitialization() {
        // set up listeners
        txtAlias.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAliasFocusLost(evt);
            }
        });
        txtDbUrl.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDbUrlFocusLost(evt);
            }
        });
        txtUsername.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtUsernameFocusLost(evt);
            }
        });
        txtPassword.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPasswordFocusLost(evt);
            }
        });
        cbJdbcDriver.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbJdbcDriverItemStateChanged(evt);
            }
        });
        ckSavePassword.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ckSavePasswordItemStateChanged(evt);
            }
        });
        ckDefaultConnection.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ckDefaultConnectionItemStateChanged(evt);
            }
        });
        
        //KeyStroke enter = KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0);
        //inputMap.put(enter, "ENTER");
        //getRootPane().getActionMap().put("ENTER", actionListener);
        dialog = this;
        KeyStroke escape = KeyStroke.getKeyStroke("ESCAPE");
        Action escapeActionListener = new AbstractAction() {
            public void actionPerformed(ActionEvent actionEvent) {
                dialog.setVisible(false);
            }
        };
        InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        inputMap.put(escape, "ESCAPE");
        rootPane.getActionMap().put("ESCAPE", escapeActionListener);
        
        // turn off message for now
        lblMessage.setText("");
        txtPassword.setText("");        
        jSplitPane1.setDividerLocation(180);
        
        ConnectionInfoUtil.load();
        DriverInfoUtil.load();
        // set up connection list
        connectionList.setModel(new DefaultListModel());
        DefaultListModel model = (DefaultListModel) connectionList.getModel();
        connectionList.setCellRenderer(new ConnectionCellRenderer());
        List list = ConnectionInfoUtil.getConnectionInfoList();
        for (int i = 0; i < list.size(); i++) {
            ConnectionInfo info = (ConnectionInfo) list.get(i);
            model.addElement(info);
        }
        // set up configured drivers
        cbJdbcDriver.setModel(new DefaultComboBoxModel());
        cbJdbcDriver.setRenderer(new DriverCellRenderer());
        DefaultComboBoxModel cbModel = (DefaultComboBoxModel)cbJdbcDriver.getModel();
        List driverList = DriverInfoUtil.getConfiguredDriverList();
        for (int i = 0; i < driverList.size(); i++) {
            cbModel.addElement(driverList.get(i));
        }
        //ConnectionInfoUtil.unload();
        this.btnConnect.setMnemonic(KeyEvent.VK_C);
        this.btnDisconnect.setMnemonic(KeyEvent.VK_D);

        // set initial button states
        btnSave.setEnabled(false);
        setButtonsEnabled(false);
        btnNew.setEnabled(true);
    }
    
    private void connectionListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_connectionListValueChanged
        lblMessage.setText("");
        JList list = (JList)evt.getSource();
        if (!evt.getValueIsAdjusting()) {
            ConnectionInfo info = (ConnectionInfo)list.getSelectedValue();
            if (info !=  null) {
                copyValuesToControls(info);
                int idx = list.getSelectedIndex();
                int count = list.getModel().getSize();
                
                setButtonsEnabled(false);
                if (idx != -1) {
                    setButtonsEnabled(true);
                }
                if (idx == 0) { // first item
                    btnUp.setEnabled(false);
                }
                if (idx == count - 1){ // last item
                    btnDown.setEnabled(false);
                }
            }
        }
    }//GEN-LAST:event_connectionListValueChanged


    private void formWindowClosed(java.awt.event.WindowEvent evt) 
    {//GEN-FIRST:event_formWindowClosed
        List connList = ConnectionInfoUtil.getConnectionInfoList();
        connList.clear();
        for (int i = 0; i < this.connectionList.getModel().getSize(); i++) {
            ConnectionInfo info = (ConnectionInfo)connectionList.getModel().getElementAt(i);
            if (info.isSaveRequested())
                connList.add(info);
        }
        ConnectionInfoUtil.store();
        ConnectionInfoUtil.unload();
        DriverInfoUtil.unload();        
        //AppProperties.unload();        
    }//GEN-LAST:event_formWindowClosed

    private void btnDisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDisconnectActionPerformed
        // remove all nodes below root
        AppContext.setDisconnectAction(true);
        AppUtil.disconnect();
        AppContext.setConnected(false);
        AbstractButton toolbarUpdate = ToolbarUtil.findToolBarButton(MenuCreator.UPDATEMODE);
        TableModelImpl model = TableUtil.getCustomTableModel();
        model.clear();
        model.hasChanged();
        toolbarUpdate.doClick();
        AppContext.setDisconnectAction(false);
        setVisible(false);
    }//GEN-LAST:event_btnDisconnectActionPerformed

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed
        this.lblMessage.setText("");
        try {
            // save current connectionInfo first
            this.btnSaveActionPerformed(null);
            //
            //ConnectionInfo connectionInfo = ConnectionInfoUtil.getDefaultConnectionInfo();
            ConnectionInfo connectionInfo = (ConnectionInfo) connectionList.getSelectedValue();
            if (connectionInfo != null) {
                ConnectionInfo ciOld = DataSourceManager.getConnectionInfo();
                if (!connectionInfo.equals(ciOld)) {
                    DataSourceManager.setConnectionInfo(connectionInfo);
                    if (DbUtil.isDbConfigured()) {
                        if (TreePopulator.populateTree()) {
                            AppUtil.setTitle(connectionInfo.getAlias());
                            AppContext.setConnected(true);
                            AbstractButton toolbarUpdate = ToolbarUtil.findToolBarButton(MenuCreator.UPDATEMODE);
                            if (toolbarUpdate.isSelected())
                                toolbarUpdate.doClick(); // set as readonly mode for a new connection
                        }
                        setVisible(false);
                    } else { // connection failed
                        log.error("Cannot connect to the specified db since dconfig tables are not configured properly.");
                        DataSourceManager.setConnectionInfo(ciOld); // restored connection info 
                        this.lblMessage.setForeground(Color.RED);
                        this.lblMessage.setText("Connection failed (dconfig tables may not be configured properly). Try again.");
                    }
                } else {
                    setVisible(false);
                }
            }
            if (AppContext.isConnected())
                MenuUtil.setEnable(MenuCreator.DISCONNECT, true);
        } catch (Exception e) {
            log.error(e);
        }
    }//GEN-LAST:event_btnConnectActionPerformed

    private void btnDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDownActionPerformed
        int fromIdx = connectionList.getSelectedIndex();
        int toIdx = fromIdx + 1;
        if (fromIdx != -1) {
            DefaultListModel model = (DefaultListModel)connectionList.getModel();
            Object obj1 = model.get(fromIdx);
            Object obj2 = model.get(toIdx);
            model.set(toIdx, obj1);
            model.set(fromIdx, obj2);
            connectionList.setSelectedIndex(toIdx);
        }
    }//GEN-LAST:event_btnDownActionPerformed

    private void btnUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpActionPerformed
        int fromIdx = connectionList.getSelectedIndex();
        int toIdx = fromIdx - 1;
        if (fromIdx != -1) {
            DefaultListModel model = (DefaultListModel)connectionList.getModel();
            Object obj1 = model.get(fromIdx);
            Object obj2 = model.get(toIdx);
            model.set(toIdx, obj1);
            model.set(fromIdx, obj2);
            connectionList.setSelectedIndex(toIdx);
        }
    }//GEN-LAST:event_btnUpActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int iRet = DialogUtil.showYesNoConfirm("Confirm Deletion", "Ddo you want to delete selected entry?");
        if (iRet == JOptionPane.YES_OPTION) {
            int idx = connectionList.getSelectedIndex();
            if (idx != -1) {
                DefaultListModel model = (DefaultListModel)connectionList.getModel();
                model.remove(idx);
                setControlValuesBlank();
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        ConnectionInfo info = (ConnectionInfo) this.connectionList.getSelectedValue();
        if (info != null) {
            info.setSaveRequested(true);
            if (this.ckDefaultConnection.isSelected()) {
                // clears previous default connection; only one default connection is allowed
                for (int i = 0; i < connectionList.getModel().getSize(); i++) {
                    ConnectionInfo entry = (ConnectionInfo)connectionList.getModel().getElementAt(i);
                    if (entry == info)
                        continue;
                    entry.setDefaultConnection(false);
                }
            }
            info = copyValuesToConnectionInfo(info);

            this.connectionList.setSelectedValue(info, true);
            this.btnSave.setEnabled(false);
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void cbJdbcDriverItemStateChanged(java.awt.event.ItemEvent evt) {
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            DriverInfo driverInfo = (DriverInfo) evt.getItem();
            if (driverInfo != null) {
                boolean useConnInfoDbUrl = false;
                ConnectionInfo connInfo = (ConnectionInfo)this.connectionList.getSelectedValue();
                if (connInfo != null) {
                    if (connInfo.getJdbcDriver().equals(driverInfo.getDriverName())) {
                        if ((connInfo.getDatabaseURL() != null) && (connInfo.getDatabaseURL().length() > 0)) {
                            useConnInfoDbUrl = true;
                        }
                    }
                }
                if (useConnInfoDbUrl)
                    txtDbUrl.setText(connInfo.getDatabaseURL());
                else
                    txtDbUrl.setText(driverInfo.getUrlFormat());
            }
            updateSaveButtonState();
        }
    }

    private void ckSavePasswordItemStateChanged(java.awt.event.ItemEvent evt) {
        updateSaveButtonState();
    }
    
    private void ckDefaultConnectionItemStateChanged(java.awt.event.ItemEvent evt) {
        updateSaveButtonState();
    }

    private void txtAliasFocusLost(java.awt.event.FocusEvent evt) {
        updateSaveButtonState();
    }

    private void txtDbUrlFocusLost(java.awt.event.FocusEvent evt) {
        updateSaveButtonState();
    }

    private void txtUsernameFocusLost(java.awt.event.FocusEvent evt) {
        updateSaveButtonState();
    }

    private void txtPasswordFocusLost(java.awt.event.FocusEvent evt) {
        updateSaveButtonState();
    }    
    
    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        ConnectionInfo info = new ConnectionInfo();
        info.setAlias(NEWALIAS + this.getNextAliasNumber());
        this.copyValuesToControls(info);
        ((DefaultListModel)connectionList.getModel()).addElement(info);
        connectionList.setSelectedValue(info , true);
        // set initial dburl
        DriverInfo driverInfo = (DriverInfo)this.cbJdbcDriver.getModel().getSelectedItem();
        if (driverInfo != null)
            this.txtDbUrl.setText(driverInfo.getUrlFormat());
        this.btnSave.setEnabled(true);
    }//GEN-LAST:event_btnNewActionPerformed
    
    private void updateSaveButtonState() {
        lblMessage.setText("");
        boolean changed = false;
        ConnectionInfo info = this.getCurrentConnectionInfo();
        if (info != null) {
            if (!info.getAlias().equals(txtAlias.getText()))
                changed = true;
            else if (!info.getDatabaseURL().equals(txtDbUrl.getText()))
                changed = true;
            else if (!info.getUsername().equals(txtUsername.getText()))
                changed = true;
            else if (!info.getPassword().equals(txtPassword.getText()))
                changed = true;
            else if (info.isSavePassword() != ckSavePassword.isSelected())
                changed = true;
            else if (info.isDefaultConnection() != ckDefaultConnection.isSelected())
                changed = true;
            else {
                // check combo box
                DriverInfo driverInfo = (DriverInfo) cbJdbcDriver.getModel().getSelectedItem();
                if ((driverInfo != null) && !info.getJdbcDriver().equals(driverInfo.getDriverName()))
                    changed = true;
            }
        }
        btnSave.setEnabled(changed);
    }

    private void setControlValuesBlank() {
        this.txtAlias.setText("");
        this.txtDbUrl.setText("");
        this.txtUsername.setText("");
        this.txtPassword.setText("");
        this.ckSavePassword.setSelected(false);
        this.ckDefaultConnection.setSelected(false);
    }
    
    private ConnectionInfo getCurrentConnectionInfo() {
        return (ConnectionInfo) this.connectionList.getSelectedValue();
    }

    private void copyValuesToControls(ConnectionInfo info) {
        this.txtAlias.setText(info.getAlias());
        this.txtDbUrl.setText(info.getDatabaseURL());
        this.txtUsername.setText(info.getUsername());
        //if (info.isSavePassword())
            this.txtPassword.setText(info.getPassword());
        this.ckSavePassword.setSelected(info.isSavePassword());
        this.ckDefaultConnection.setSelected(info.isDefaultConnection());
        String driverName = info.getJdbcDriver();
        if (driverName != null) {
            for (int i = 0; i < this.cbJdbcDriver.getModel().getSize(); i++) {
                DriverInfo driverInfo = (DriverInfo)this.cbJdbcDriver.getModel().getElementAt(i);
                if (driverInfo.getDriverName().equals(driverName)) {
                    this.cbJdbcDriver.getModel().setSelectedItem(driverInfo);
                    break;
                }
            }
        }
    }

    private ConnectionInfo copyValuesToConnectionInfo(ConnectionInfo info) {
        DriverInfo driverInfo = (DriverInfo)this.cbJdbcDriver.getSelectedItem();
        info.setJdbcDriver(driverInfo.getDriverName());

        info.setDriverClassName(driverInfo.getDriverClass());
        info.setJarFilePath(driverInfo.getDriverFilePath());
        info.setAlias(this.txtAlias.getText());
        info.setDatabaseURL(this.txtDbUrl.getText());
        info.setUsername(this.txtUsername.getText());
        info.setPassword(this.txtPassword.getText());
        info.setSavePassword(this.ckSavePassword.isSelected());
        info.setDefaultConnection(this.ckDefaultConnection.isSelected());
        return info;
    }
    
    class ConnectionCellRenderer extends JLabel implements ListCellRenderer {
        private final Color SELECTED_BKGROUND = new Color(0x33, 0x66, 0xCC);
        
        public ConnectionCellRenderer() {
            setOpaque(true);
            setIconTextGap(12);
        }

        public Component getListCellRendererComponent(JList list, Object value,
                        int index, boolean isSelected, boolean cellHasFocus) {
            if (value != null) {
                ConnectionInfo entry = (ConnectionInfo) value;
                setText(entry.getAlias());
                if (entry.isConfigDone())
                    setIcon(ImageUtil.createImageIcon("images/connection24.png",""));
                else
                    setIcon(ImageUtil.createImageIcon("images/connection24N.png",""));
                if (isSelected) {
                    setBackground(SELECTED_BKGROUND);
                    setForeground(Color.white);
                } else {
                    setBackground(Color.white);
                    setForeground(Color.black);
                }
            }
            return this;
        }
    }
    
    class DriverCellRenderer extends JLabel implements ListCellRenderer {
        private final Color SELECTED_BKGROUND = new Color(0x33, 0x66, 0xCC);
        
        public DriverCellRenderer() {
            setOpaque(true);
            setIconTextGap(12);
        }

        public Component getListCellRendererComponent(JList list, Object value,
                        int index, boolean isSelected, boolean cellHasFocus) {
            if (value != null) {
                DriverInfo entry = (DriverInfo) value;
                setText(entry.getDriverName());
                setIcon(ImageUtil.createImageIcon("images/ok16.png",""));
                if (isSelected) {
                    setBackground(SELECTED_BKGROUND);
                    setForeground(Color.white);
                } else {
                    setBackground(Color.white);
                    setForeground(Color.black);
                }
            }
            return this;
        }
    }

    public int getNextAliasNumber() {
    	int iMax = 0;
        for (int i = 0; i < connectionList.getModel().getSize(); i++) {
            ConnectionInfo info = (ConnectionInfo)connectionList.getModel().getElementAt(i);
            String keyname = info.getAlias();
            int idx = keyname.indexOf(NEWALIAS);
            if (idx != 0)
                continue;
            String num = keyname.substring(idx + NEWALIASLEN, keyname.length()).trim();
            try {
                int iNum = Integer.parseInt(num);
                if (iNum > iMax)
                    iMax = iNum;
            } catch (Exception ex) {
            }
        }
    	return iMax + 1;
    }
    
    private void setButtonsEnabled(boolean b) {
        btnDelete.setEnabled(b);
        btnUp.setEnabled(b);
        btnDown.setEnabled(b);        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DlgDbConnection(new javax.swing.JFrame(), true).setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConnect;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDisconnect;
    private javax.swing.JButton btnDown;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUp;
    private javax.swing.JComboBox cbJdbcDriver;
    private javax.swing.JCheckBox ckDefaultConnection;
    private javax.swing.JCheckBox ckSavePassword;
    private javax.swing.JList connectionList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JLabel lblMessage;
    private javax.swing.JTextField txtAlias;
    private javax.swing.JTextField txtDbUrl;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
    
}
