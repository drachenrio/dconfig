/*
 * ============================================================================
 * GNU Lesser General Public License
 * ============================================================================
 *
 * DConfig - Free Dynamic Configuration Toolkit
 * Copyright (C) 2006, 2007 Jonathan Luo
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307, USA.
 * 
 */

package org.moonwave.dconfig.ui;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.io.File;
import java.util.List;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.ListCellRenderer;
import javax.swing.filechooser.FileFilter;
import org.moonwave.dconfig.model.DriverInfo;
import org.moonwave.dconfig.ui.model.AppContext;
import org.moonwave.dconfig.ui.util.DialogUtil;
import org.moonwave.dconfig.ui.util.DriverInfoUtil;

import org.moonwave.dconfig.ui.util.ImageUtil;
import org.moonwave.dconfig.util.JarFileUtil;

/**
 *
 * @author  jonathan
 */
public class DlgDriverManager extends javax.swing.JDialog {
    static JFileChooser fileChooser;
    javax.swing.JDialog dialog;
    public static final String NEWDRIVERNAME = "New Driver #";
    public static final int    NEWDRIVERNAMELEN = NEWDRIVERNAME.length();
    boolean newActionFinished = true;
    boolean showMsg = false;
    
    /** Creates new form DlgDriverManager */
    public DlgDriverManager(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        // set dialog position inside its parent
        if (parent != null) {
            Dimension parentSize = parent.getSize();
            Point p = parent.getLocation(); // Parent position
            setLocation(p.x + parentSize.width / 18, p.y+ parentSize.height / 5); 
        }
        initComponents();
        postInitialization();
    }

    protected void postInitialization() {
        DriverInfoUtil.load();
        btnSave.setEnabled(false);
        
        lblMessage.setForeground(Color.RED);
        lblMessage.setText("");
        jSplitPane1.setDividerLocation(220);
        
        driverList.setModel(new DefaultListModel());
        driverList.setCellRenderer(new IconCellRenderer());
        DefaultListModel model = (DefaultListModel) driverList.getModel();        
        // set up driver list
        List list = DriverInfoUtil.getDriverInfoList();
        for (int i = 0; i < list.size(); i++) {
            DriverInfo info = (DriverInfo) list.get(i);
            info.copyToOld();
            info.setSaveRequested(false);
            model.addElement(info);
        }        
        if (driverList.getModel().getSize() > 0)
            driverList.setSelectedIndex(0);
        
        dialog = this;
        KeyStroke escape = KeyStroke.getKeyStroke("ESCAPE");
        Action escapeActionListener = new AbstractAction() {
            public void actionPerformed(ActionEvent actionEvent) {
                dialog.setVisible(false);
            }
        };
        InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        inputMap.put(escape, "ESCAPE");
        rootPane.getActionMap().put("ESCAPE", escapeActionListener);
        showMsg = false;        
    }    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jPanel1 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtDriverName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtUrlFormal = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        cbDriverClass = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        txtDriverFilePath = new javax.swing.JTextField();
        btnFile = new javax.swing.JButton();
        lblMessage = new javax.swing.JLabel();
        btnFindClass = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        driverList = new javax.swing.JList();
        jLabel5 = new javax.swing.JLabel();
        btnNew = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnUp = new javax.swing.JButton();
        btnDown = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Driver Manager");
        setName("JDBC Driver Manager");
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                formFocusLost(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("JDBC Driver"));
        jLabel1.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel1.setText("Driver Name:");

        txtDriverName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDriverNameKeyReleased(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel2.setText("URL Format:");

        txtUrlFormal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtUrlFormalKeyReleased(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel3.setText("Driver Class:");

        cbDriverClass.setEditable(true);
        cbDriverClass.setFont(new java.awt.Font("Dialog", 0, 12));
        cbDriverClass.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbDriverClassItemStateChanged(evt);
            }
        });
        cbDriverClass.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cbDriverClassKeyReleased(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel4.setText("Driver File Path:");

        txtDriverFilePath.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDriverFilePathKeyReleased(evt);
            }
        });

        btnFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/folder16.png")));
        btnFile.setToolTipText("Load JDBC driver jar file");
        btnFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFileActionPerformed(evt);
            }
        });

        lblMessage.setFont(new java.awt.Font("Dialog", 0, 12));
        lblMessage.setText("message");

        btnFindClass.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/showdriver16.png")));
        btnFindClass.setToolTipText("Display driver classes");
        btnFindClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindClassActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, lblMessage, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel1)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel2)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel3)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel4))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(txtDriverName, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 462, Short.MAX_VALUE)
                            .add(txtUrlFormal, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 462, Short.MAX_VALUE)
                            .add(jPanel3Layout.createSequentialGroup()
                                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, cbDriverClass, 0, 431, Short.MAX_VALUE)
                                    .add(txtDriverFilePath, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 431, Short.MAX_VALUE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(btnFindClass, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(btnFile, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(txtDriverName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(txtUrlFormal, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(cbDriverClass, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnFindClass))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(btnFile)
                    .add(txtDriverFilePath, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 103, Short.MAX_VALUE)
                .add(lblMessage, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(61, 61, 61))
        );

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jSplitPane1.setRightComponent(jPanel2);

        jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        driverList.setFont(new java.awt.Font("Dialog", 0, 12));
        driverList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        driverList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                driverListValueChanged(evt);
            }
        });

        jScrollPane1.setViewportView(driverList);

        jLabel5.setText("Drive Name");

        btnNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/new16.gif")));
        btnNew.setToolTipText("Add a new JDBC driver");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/save16.gif")));
        btnSave.setToolTipText("Save changes");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete16.gif")));
        btnDelete.setToolTipText("Remove an rentry");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnUp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/up16.png")));
        btnUp.setToolTipText("Move entry up");
        btnUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpActionPerformed(evt);
            }
        });

        btnDown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/down16.png")));
        btnDown.setToolTipText("Move entrty down");
        btnDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDownActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                    .add(jLabel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, btnSave, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, btnDelete, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnDown, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnNew, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, btnUp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel4Layout.linkSize(new java.awt.Component[] {btnDelete, btnSave}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel5)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(btnNew)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnSave)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnDelete)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnUp)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnDown))
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel4Layout.linkSize(new java.awt.Component[] {btnDelete, btnNew, btnSave}, org.jdesktop.layout.GroupLayout.VERTICAL);

        jSplitPane1.setLeftComponent(jPanel4);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jSplitPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 781, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jSplitPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE)
        );

        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(368, Short.MAX_VALUE)
                        .add(btnClose)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 356, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(8, 8, 8)
                .add(btnClose)
                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtDriverFilePathKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDriverFilePathKeyReleased
        DriverInfo info = (DriverInfo) driverList.getSelectedValue();
        if (info != null) {
            info.setDriverFilePath(this.txtDriverFilePath.getText());
            checkConfigOK();
            updateSaveButtonState();
        }
    }//GEN-LAST:event_txtDriverFilePathKeyReleased

    private void cbDriverClassKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cbDriverClassKeyReleased
        DriverInfo info = (DriverInfo) driverList.getSelectedValue();
        if (info != null) {
            info.setDriverClass((String)this.cbDriverClass.getSelectedItem());
            checkConfigOK();
            updateSaveButtonState();
        }
    }//GEN-LAST:event_cbDriverClassKeyReleased

    private void txtUrlFormalKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUrlFormalKeyReleased
        DriverInfo info = (DriverInfo) driverList.getSelectedValue();
        if (info != null) {
            info.setUrlFormat(this.txtUrlFormal.getText());
            checkConfigOK();
            updateSaveButtonState();
        }
    }//GEN-LAST:event_txtUrlFormalKeyReleased

    private void txtDriverNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDriverNameKeyReleased
        DriverInfo info = (DriverInfo) driverList.getSelectedValue();
        if (info != null) {
            info.setDriverName(this.txtDriverName.getText());
            checkConfigOK();
            updateSaveButtonState();
        }
    }//GEN-LAST:event_txtDriverNameKeyReleased

    private void cbDriverClassItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbDriverClassItemStateChanged
        DriverInfo info = (DriverInfo) driverList.getSelectedValue();
        if ((info != null) && (newActionFinished == true)) {
            info.setDriverClass((String)this.cbDriverClass.getSelectedItem());
            checkConfigOK();
            updateSaveButtonState();
        }
    }//GEN-LAST:event_cbDriverClassItemStateChanged
    
    private void btnDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDownActionPerformed
        int fromIdx = driverList.getSelectedIndex();
        int toIdx = fromIdx + 1;
        if (fromIdx != -1) {
            DefaultListModel model = (DefaultListModel)driverList.getModel();
            Object obj1 = model.get(fromIdx);
            Object obj2 = model.get(toIdx);
            model.set(toIdx, obj1);
            model.set(fromIdx, obj2);
            driverList.setSelectedIndex(toIdx);
        }
    }//GEN-LAST:event_btnDownActionPerformed

    private void btnUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpActionPerformed
        int fromIdx = driverList.getSelectedIndex();
        int toIdx = fromIdx - 1;
        if (fromIdx != -1) {
            DefaultListModel model = (DefaultListModel)driverList.getModel();
            Object obj1 = model.get(fromIdx);
            Object obj2 = model.get(toIdx);
            model.set(toIdx, obj1);
            model.set(fromIdx, obj2);
            driverList.setSelectedIndex(toIdx);
        }
    }//GEN-LAST:event_btnUpActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int iRet = DialogUtil.showYesNoConfirm("Confirm Deletion", "Do you want to delete selected entry?");
        if (iRet == JOptionPane.YES_OPTION) {
            int idx = driverList.getSelectedIndex();
            if (idx != -1) {
                DefaultListModel model = (DefaultListModel)driverList.getModel();
                model.remove(idx);
                setControlValuesBlank();
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnFindClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindClassActionPerformed
        List list = JarFileUtil.getDriverList(this.txtDriverFilePath.getText(), "Driver");
        if (list.size() > 0)
            this.cbDriverClass.removeAllItems();
        for (int i = 0; i < list.size(); i++) {
            this.cbDriverClass.addItem((String)list.get(i));
        }        
    }//GEN-LAST:event_btnFindClassActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        DriverInfo info = (DriverInfo) this.driverList.getSelectedValue();
        if (info != null) {
            info.setSaveRequested(true);
            //info = copyValuesToDriverInfo(info);
            info.copyToOld();
            
            this.driverList.setSelectedValue(info, true);
            this.btnSave.setEnabled(false);
	    //int idx = driverList.getSelectedIndex();
            //driverList.setSelectedIndex(idx);
            driverList.requestFocusInWindow();
        }
    }//GEN-LAST:event_btnSaveActionPerformed
    
    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        newActionFinished = false;
        DriverInfo info = new DriverInfo();
        info.setDriverName(NEWDRIVERNAME + this.getNextDriverName());
        // blank out controls first
        //info.copyToOld();
        this.copyValuesToControls(info);
        info.setNewItem(true);
        ((DefaultListModel)driverList.getModel()).addElement(info);
        driverList.setSelectedValue(info , true);
        this.btnSave.setEnabled(true);
        this.txtDriverName.requestFocusInWindow();
        newActionFinished = true;
    }//GEN-LAST:event_btnNewActionPerformed

    private void driverListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_driverListValueChanged
        if (!evt.getValueIsAdjusting()) {
            JList list = (JList)evt.getSource();
            DriverInfo info = (DriverInfo)list.getSelectedValue();
            if (info !=  null) {
                copyValuesToControls(info);
                int idx = list.getSelectedIndex();
                int count = list.getModel().getSize();
                
                setButtonsEnabled(false);
                if (idx != -1) {
                    setButtonsEnabled(true);
                }
                if (idx == 0) { // first item
                    btnUp.setEnabled(false);
                }
                if (idx == count - 1){ // last item
                    btnDown.setEnabled(false);
                }
                updateSaveButtonState();
            }
        }
    }//GEN-LAST:event_driverListValueChanged

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        List driverInfoList = DriverInfoUtil.getDriverInfoList();
        driverInfoList.clear();
        for (int i = 0; i < this.driverList.getModel().getSize(); i++) {
            DriverInfo info = (DriverInfo)driverList.getModel().getElementAt(i);
            if (info.isSaveRequested())
                driverInfoList.add(info);
            else if (!info.isNewItem()) {
                info.restoreFromOld();
                info.setSaveRequested(true);
                driverInfoList.add(info);
            }
        }
        DriverInfoUtil.store();
        DriverInfoUtil.unload();
        fileChooser = null;        
    }//GEN-LAST:event_formWindowClosed

    private void formFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusLost
    }//GEN-LAST:event_formFocusLost

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        // check whether any changes
        boolean changed = false;
        for (int i = 0; i < driverList.getModel().getSize(); i++) {
            DriverInfo info = (DriverInfo)driverList.getModel().getElementAt(i);
            changed = info.hasChanged();
            if (changed)
                break;
        }
        if (changed) {
            int iRet = DialogUtil.showYesNoConfirm("Confirm Exit Driver Manager", "You have unsaved changes, select Yes to exit without save.");
            if (iRet == JOptionPane.YES_OPTION) {
                setVisible(false);                
            }
        } else {
            setVisible(false);
        }
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFileActionPerformed
        if (fileChooser == null) {
            fileChooser = new JFileChooser();
            // Set the current directory to the application's current directory
            FileFilter filter1 = new ExtensionFileFilter("Jar Files", new String[] { "jar"});
            fileChooser.setFileFilter(filter1);
            fileChooser.setMultiSelectionEnabled(false);
        }
        int rVal = fileChooser.showOpenDialog(AppContext.appContext().getCfgEditor());
        if (rVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            txtDriverFilePath.setText(file.getPath());
            DriverInfo info = (DriverInfo) driverList.getSelectedValue();
            if (info != null) {
                info.setDriverFilePath(this.txtDriverFilePath.getText());
            }            
            checkConfigOK();
            updateSaveButtonState();            
        } else if (rVal == JFileChooser.CANCEL_OPTION) {
        }
    }//GEN-LAST:event_btnFileActionPerformed

    private boolean checkConfigOK() {
        boolean bRet = false;
        DriverInfo selectedEntry = (DriverInfo) driverList.getSelectedValue();         
        if (selectedEntry == null)
            return false;
        String driverClass = (String)this.cbDriverClass.getSelectedItem();
        if ((driverClass != null) && (driverClass.length() > 0)) {
            if (selectedEntry.getSupportedDriverClass().length() > 0) { // supported driver class exists
                if (driverClass.equals(selectedEntry.getSupportedDriverClass())) {
                    if (JarFileUtil.checkJdbcDriver(txtDriverFilePath.getText(), driverClass) && 
                                                   (this.txtUrlFormal.getText().length() > 0))
                        bRet = true;
                    else {
                        if (showMsg)
                            lblMessage.setText("Supported Jdbc Driver "  + selectedEntry.getSupportedDriverClass() + 
                                    " could not be found in the selected jar file. Try again.");
                    }
                }
            } else { // user defined custom driver
                if (JarFileUtil.checkJdbcDriver(txtDriverFilePath.getText(), driverClass) && 
                                               (this.txtUrlFormal.getText().length() > 0)) {
                    bRet = true;
                } else {
                    if (showMsg)
                        lblMessage.setText("Specified Jdbc Driver "  + driverClass +
                                " could not be found in the selected jar file. Try again.");
                }
            }
        }
        if (bRet == true) {
            lblMessage.setText("");
            selectedEntry.setConfigOK(true);
        } else {
            selectedEntry.setConfigOK(false);
        }
        Object selObj = driverList.getSelectedValue();
        driverList.setSelectedValue(selObj, true);
        return bRet;
    }
    
    class ExtensionFileFilter extends FileFilter {
      String description;

      String extensions[];

      public ExtensionFileFilter(String description, String extension) {
        this(description, new String[] { extension });
      }

      public ExtensionFileFilter(String description, String extensions[]) {
        if (description == null) {
          this.description = extensions[0];
        } else {
          this.description = description;
        }
        this.extensions = (String[]) extensions.clone();
        toLower(this.extensions);
      }

      private void toLower(String array[]) {
        for (int i = 0, n = array.length; i < n; i++) {
          array[i] = array[i].toLowerCase();
        }
      }

      public String getDescription() {
        return description;
      }

      public boolean accept(File file) {
        if (file.isDirectory()) {
          return true;
        } else {
          String path = file.getAbsolutePath().toLowerCase();
          for (int i = 0, n = extensions.length; i < n; i++) {
            String extension = extensions[i];
            if ((path.endsWith(extension) && (path.charAt(path.length() - extension.length() - 1)) == '.')) {
              return true;
            }
          }
        }
        return false;
      }
    }
        
    class IconCellRenderer implements ListCellRenderer {
        protected DefaultListCellRenderer renderer = new DefaultListCellRenderer();
        
        public Component getListCellRendererComponent(JList list, Object value, int index,
                                                      boolean isSelected, boolean cellHasFocus) {
            DriverInfo entry = null;
            if (value != null) {
                entry = (DriverInfo) value;
            }
            JLabel label = (JLabel) renderer.getListCellRendererComponent(list, value, index,
            isSelected, cellHasFocus);
            String currentEntry = label.getText();
            if ((entry != null) && entry.isConfigOK())
                label.setIcon(ImageUtil.createImageIcon("images/ok24.png" ,""));
            else
                label.setIcon(ImageUtil.createImageIcon("images/delete24.png" ,""));
            return label;
        }
    }
    
    private void copyValuesToControls(DriverInfo info) {
        this.txtDriverName.setText(info.getDriverName());
        this.txtUrlFormal.setText(info.getUrlFormat());
        this.txtDriverFilePath.setText(info.getDriverFilePath());
        this.cbDriverClass.removeAllItems();
        this.cbDriverClass.addItem(info.getDriverClass());
    }

    private DriverInfo copyValuesToDriverInfo(DriverInfo info) {
        info.setDriverName(this.txtDriverName.getText());
        Object driverClass = this.cbDriverClass.getModel().getSelectedItem();
        if (driverClass instanceof String)
            info.setDriverClass((String) driverClass);
        info.setDriverFilePath(this.txtDriverFilePath.getText());
        info.setUrlFormat(this.txtUrlFormal.getText());
        return info;
    }
    
    public int getNextDriverName() {
    	int iMax = 0;
        for (int i = 0; i < driverList.getModel().getSize(); i++) {
            DriverInfo info = (DriverInfo)driverList.getModel().getElementAt(i);
            String keyname = info.getDriverName();
            int idx = keyname.indexOf(NEWDRIVERNAME);
            if (idx != 0)
                continue;
            String num = keyname.substring(idx + NEWDRIVERNAMELEN, keyname.length()).trim();
            try {
                int iNum = Integer.parseInt(num);
                if (iNum > iMax)
                    iMax = iNum;
            } catch (Exception ex) {
            }
        }
    	return iMax + 1;
    }

    private void updateSaveButtonState() {
        boolean changed = false;
        DriverInfo info = (DriverInfo) this.driverList.getSelectedValue();
        if (info != null) {
            changed = info.hasChanged();
        }
        btnSave.setEnabled(changed);
    }

    private void setControlValuesBlank() {
        this.txtDriverName.setText("");
        this.txtDriverFilePath.setText("");
        this.txtUrlFormal.setText("");
        this.cbDriverClass.removeAllItems();
    }

    private void setButtonsEnabled(boolean b) {
        btnDelete.setEnabled(b);
        btnUp.setEnabled(b);
        btnDown.setEnabled(b);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DlgDriverManager(new javax.swing.JFrame(), true).setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDown;
    private javax.swing.JButton btnFile;
    private javax.swing.JButton btnFindClass;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUp;
    private javax.swing.JComboBox cbDriverClass;
    private javax.swing.JList driverList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JLabel lblMessage;
    private javax.swing.JTextField txtDriverFilePath;
    private javax.swing.JTextField txtDriverName;
    private javax.swing.JTextField txtUrlFormal;
    // End of variables declaration//GEN-END:variables
    
}
